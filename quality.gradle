//apply plugin: 'findbugs'
//apply plugin: 'checkstyle'
apply plugin: "net.saliman.cobertura"
apply plugin: 'jacoco'

tasks.withType(FindBugs) {
    reports {
        xml.enabled = propertyOr('findbugsXmlReport', false)
        xml.withMessages = true
        html.enabled = !xml.enabled
    }
}
//
//findbugsTest {
//    excludeFilter file('config/findbugs/findbugs-exclude-filter.xml')
//}
//
//findbugsIntegrationTest {
//    excludeFilter file('config/findbugs/findbugs-exclude-filter.xml')
//}
//

//checkstyle {
//
//    //This is used to set the path of suppressions.xml within checkstyle.xml
//    configProperties = [sameDir: "${rootDir}/config/checkstyle"]
//    ignoreFailures = false
//}
//
//
//task checkstyleAll(dependsOn: [checkstyleMain, checkstyleTest, checkstyleIntegrationTest]) {
//}



// See https://github.com/stevesaliman/gradle-cobertura-plugin/blob/master/usage.md
cobertura {
    coverageFormats = ['html', 'xml']
    coverageIgnoreTrivial = true
    coverageIgnores = ['org.slf4j.Logger.*']
    
    // By default, Cobertura picks up tasks of type:Test. 
    // So, integrationTest comes under this purview as well. 
    // We explicitly choose unit tests only for coverage here
    // as we can't run integration tests on this code base
    // See https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/TaskCollection.html
    // for documentation on extracting a TaskCollection instance
    coverageTestTasks { tasks.matching { it.name.equals('test') } }
}

jacocoTestReport {
    dependsOn = [test]
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/*Exception.class',
                '**/com/ekart/springbootjetty/sample/apis/config/spring/*.class',
                '**/com/ekart/springbootjetty/sample/apis/dtos/*.class',
                '**/com/ekart/springbootjetty/sample/apis/dtos/health/*.class',
                '**/com/ekart/springbootjetty/sample/apis/jetty/CustomJetty*.class',
                '**/com/ekart/springbootjetty/sample/apis/Application.class'
            ])
        })
    }
}

test {
    jacoco {
        append = false
        destinationFile = file("${buildDir}/jacoco/jacocoTest.exec")
    }
}

//TODO: Uncomment this when we've cleaned up the fake error messages
//test.finalizedBy(project.tasks.cobertura)

apply plugin: 'org.sonarqube'

sonarqube {
    properties{
        property "sonar.projectKey","com.ekart:$project.name"
        property "sonar.projectName",project.name
        property "sonar.java.coveragePlugin","jacoco"
        property "sonar.groovy.jacoco.reportPath","${buildDir}/jacoco/jacocoTest.exec"
        property "sonar.java.binaries","build/classes/main"
        property "sonar.java.test.binaries","build/classes/test"
        property "sonar.sources","src/main"
        property "sonar.tests","src/test"
        property "sonar.exclusions", "**/com/ekart/springbootjetty/sample/apis/jetty/CustomJetty*"
    }
}
